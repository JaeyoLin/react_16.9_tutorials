{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/UseImperativeHandle.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","TypeError","MyInput","props","ref","useState","count","setCount","inputRef","useRef","useImperativeHandle","focus","current","select","text","console","log","updateCount","number","forwardRef","UseImperativeHandle","myInputRef","onClick","Math","floor","random","defaultValue"],"mappings":"6GAGe,SAASA,EAAeC,EAAKC,GAC1C,OCJa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDGxB,CAAeA,IEJT,SAA+BA,EAAKC,GACjD,IAAIG,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKV,EAAIW,OAAOC,cAAmBP,GAAMI,EAAKC,EAAGG,QAAQC,QAChEV,EAAKW,KAAKN,EAAGO,QAETf,GAAKG,EAAKa,SAAWhB,GAH8CI,GAAK,IAK9E,MAAOa,GACPZ,GAAK,EACLC,EAAKW,EACL,QACA,IACOb,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,EFnBuB,CAAqBJ,EAAKC,IGJ3C,WACb,MAAM,IAAIkB,UAAU,wDHG0C,GAJhE,iC,mEIOIC,EAAU,SAACC,EAAOC,GAAS,IAAD,EACFC,mBAAS,GADP,mBACrBC,EADqB,KACdC,EADc,KAEtBC,EAAWC,mBAgBjB,OAdAC,8BAAoBN,EAAK,WACvB,MAAO,CACLO,MADK,WAEHH,EAASI,QAAQD,SAEnBE,OAJK,SAIEC,GACLC,QAAQC,IAAI,SAAUF,GACtBN,EAASI,QAAQd,MAAQgB,GAE3BG,YARK,SAQOC,GACVX,EAASW,OAKb,6BACE,yCAAOd,IAAKI,GAAcL,IAC1B,+CAAiBG,MAKvBJ,EAAUiB,qBAAWjB,GA2BNkB,UAzBa,WAC1B,IAAMC,EAAaZ,mBAcnB,OACE,oCACE,4BAAQa,QAdQ,WAClBD,EAAWT,QAAQD,UAajB,eACA,4BAAQW,QAPc,WACxBD,EAAWT,QAAQK,YAAYM,KAAKC,MAAoB,GAAdD,KAAKE,aAM7C,gBACA,4BAAQH,QAZQ,WAClBD,EAAWT,QAAQC,OAAO,gBAWxB,eACA,kBAACX,EAAD,CAASwB,aAAa,cAActB,IAAKiB","file":"static/js/8.6ad0b9e5.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, {\n  useState,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\n\nlet MyInput = (props, ref) => {\n  const [count, setCount] = useState(0);\n  const inputRef = useRef();\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      select(text) {\n        console.log('select', text);\n        inputRef.current.value = text;\n      },\n      updateCount(number) {\n        setCount(number);\n      },\n    }\n  });\n  return (\n    <div>\n      <input ref={inputRef} {...props} />\n      <span>{`Count: ${count}`}</span>\n    </div>\n  );\n}\n\nMyInput = forwardRef(MyInput);\n\nconst UseImperativeHandle = () => {\n  const myInputRef = useRef();\n\n  const handleFocus = () => {\n    myInputRef.current.focus();\n  }\n\n  const handleClear = () => {\n    myInputRef.current.select('Yes, I do.');\n  }\n\n  const handleChangeCount = () => {\n    myInputRef.current.updateCount(Math.floor(Math.random()*10));\n  }\n\n  return (\n    <>\n      <button onClick={handleFocus}>Focus input</button>\n      <button onClick={handleChangeCount}>Random count</button>\n      <button onClick={handleClear}>Cleat input</button>\n      <MyInput defaultValue=\"Hello World\" ref={myInputRef} />\n    </>\n  );\n}\n\nexport default UseImperativeHandle;\n"],"sourceRoot":""}