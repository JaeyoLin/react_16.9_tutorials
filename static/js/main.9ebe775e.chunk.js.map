{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WaitingComponent","Component","props","fallback","Index","lazy","UseState","UseEffect","UseLayoutEffect","UseLayoutEffect2","UseMemo","UseCallback","UseRef","UseImperativeHandle","UseContext","UseReducer","GlobalStateManager","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAKaA,G,MAAmB,SAAAC,GAAS,OAAI,SAAAC,GAAK,OAChD,kBAAC,WAAD,CAAUC,SAAU,oDAClB,kBAACF,EAAcC,OAIbE,EAAQC,eAAK,kBAAM,gCACnBC,EAAWD,eAAK,kBAAM,gCACtBE,EAAYF,eAAK,kBAAM,+BACvBG,EAAkBH,eAAK,kBAAM,+BAC7BI,EAAmBJ,eAAK,kBAAM,+BAC9BK,EAAUL,eAAK,kBAAM,gCACrBM,EAAcN,eAAK,kBAAM,+BACzBO,EAASP,eAAK,kBAAM,gCACpBQ,EAAsBR,eAAK,kBAAM,+BACjCS,EAAaT,eAAK,kBAAM,gCACxBU,EAAaV,eAAK,kBAAM,+BACxBW,EAAqBX,eAAK,kBAAM,+BAqBvBY,EAnBH,WACV,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpB,EAAiBI,KAClD,kBAAC,IAAD,CAAOc,KAAK,YAAYE,UAAWpB,EAAiBM,KACpD,kBAAC,IAAD,CAAOY,KAAK,aAAaE,UAAWpB,EAAiBO,KACrD,kBAAC,IAAD,CAAOW,KAAK,mBAAmBE,UAAWpB,EAAiBQ,KAC3D,kBAAC,IAAD,CAAOU,KAAK,oBAAoBE,UAAWpB,EAAiBS,KAC5D,kBAAC,IAAD,CAAOS,KAAK,WAAWE,UAAWpB,EAAiBU,KACnD,kBAAC,IAAD,CAAOQ,KAAK,eAAeE,UAAWpB,EAAiBW,KACvD,kBAAC,IAAD,CAAOO,KAAK,UAAUE,UAAWpB,EAAiBY,KAClD,kBAAC,IAAD,CAAOM,KAAK,uBAAuBE,UAAWpB,EAAiBa,KAC/D,kBAAC,IAAD,CAAOK,KAAK,cAAcE,UAAWpB,EAAiBc,KACtD,kBAAC,IAAD,CAAOI,KAAK,cAAcE,UAAWpB,EAAiBe,KACtD,kBAAC,IAAD,CAAOG,KAAK,sBAAsBE,UAAWpB,EAAiBgB,OC1BhDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9ebe775e.chunk.js","sourcesContent":["import React, { Fragment, lazy, Suspense } from 'react';\nimport { Route } from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\n\nexport const WaitingComponent = Component => props => (\n  <Suspense fallback={<div>Module loading....</div>}>\n    <Component {...props} />\n  </Suspense>\n);\n\nconst Index = lazy(() => import('./components/Index'));\nconst UseState = lazy(() => import('./components/UseState'));\nconst UseEffect = lazy(() => import('./components/UseEffect'));\nconst UseLayoutEffect = lazy(() => import('./components/UseLayoutEffect'));\nconst UseLayoutEffect2 = lazy(() => import('./components/UseLayoutEffect2'));\nconst UseMemo = lazy(() => import('./components/UseMomo'));\nconst UseCallback = lazy(() => import('./components/UseCallback'));\nconst UseRef = lazy(() => import('./components/UseRef'));\nconst UseImperativeHandle = lazy(() => import('./components/UseImperativeHandle'));\nconst UseContext = lazy(() => import('./components/UseContext'));\nconst UseReducer = lazy(() => import('./components/UseReducer'));\nconst GlobalStateManager = lazy(() => import('./components/GlobalStateManager/GlobalStateManager'));\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Route path=\"/\" exact component={WaitingComponent(Index)} />\n      <Route path=\"/useState\" component={WaitingComponent(UseState)} />\n      <Route path=\"/useEffect\" component={WaitingComponent(UseEffect)} />\n      <Route path=\"/useLayoutEffect\" component={WaitingComponent(UseLayoutEffect)} />\n      <Route path=\"/useLayoutEffect2\" component={WaitingComponent(UseLayoutEffect2)} />\n      <Route path=\"/useMemo\" component={WaitingComponent(UseMemo)} />\n      <Route path=\"/useCallback\" component={WaitingComponent(UseCallback)} />\n      <Route path=\"/useRef\" component={WaitingComponent(UseRef)} />\n      <Route path=\"/useImperativeHandle\" component={WaitingComponent(UseImperativeHandle)} />\n      <Route path=\"/useContext\" component={WaitingComponent(UseContext)} />\n      <Route path=\"/useReducer\" component={WaitingComponent(UseReducer)} />\n      <Route path=\"/globalStateManager\" component={WaitingComponent(GlobalStateManager)} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch } from 'react-router-dom';\n\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <App />\n    </Switch>\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}